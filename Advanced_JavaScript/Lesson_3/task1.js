"use strict";

/*
Задание 1:
Вы разрабатываете прототип веб-приложения для чтения новостей. Статьи "хранятся"
во внутреннем массиве (имитируя базу данных). Когда пользователь нажимает на
кнопку "Загрузить новости", ваш код должен имитировать задержку, словно
происходит реальная загрузка данных из внешнего источника, а после этой
задержки — отображать новости на странице.

1. Создайте базовую HTML-структуру с кнопкой для загрузки новостей и контейнером
для их отображения.
2. Реализуйте функцию fetchNews(), возвращающую промис. Эта функция должна
имитировать задержку в 2 секунды перед успешным возвращением данных из
"виртуальной" базы данных. Для добавления интереса: с вероятностью 10% она
должна возвращать ошибку вместо данных.
3. При нажатии на кнопку "Загрузить новости" вызывайте функцию fetchNews(),
обрабатывая успешное выполнение и ошибки с использованием then() и catch().
При успешной загрузке отобразите статьи на странице. При ошибке покажите
сообщение об ошибке.
4. Добавьте функционал, который отключает кнопку загрузки на время "загрузки"
новостей и активирует её снова после завершения операции (будь то успешная
загрузка или ошибка).
*/

const btnEl = document.querySelector(".load");
const contentEl = document.querySelector(".content");
const news = [
  {
    title: "title1",
    content: "content1",
  },
  {
    title: "title2",
    content: "content2",
  },
  {
    title: "title3",
    content: "content3",
  },
];

let i = 0;

// Функция для загрузки новостей:
const fetchNews = () => {
  // Возвращаем промис, который будет выполнен через 500 мс:
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      // Если случайное число меньше 0.1(10% вероятность выпадения ошибки),
      // то возвращаем ошибку, иначе возвращаем новость:
      if (Math.random() < 0.1) {
        reject(new Error("Ошибка при загрузке новостей"));
      } else {
        resolve(news[i++]);
      }
    }, 500);
  });
};

// Проверяем работу функции:
// fetchNews()
//     .then(news => {
//         console.log(news);
//     });

// Вешаем обработчик события на кнопку "Загрузить":
btnEl.addEventListener("click", () => {
  // Если не отключать кнопку и нажать на нее во время загрузки новостей,
  // то будет ошибка!!!
  // Отключаем кнопку "Загрузить" на время загрузки новостей:
  btnEl.disabled = true;
  // Вызываем функцию для загрузки новостей:
  fetchNews()
    // При успешной загрузке отображаем новость на странице
    .then((news) => {
      contentEl.insertAdjacentHTML(
        "beforeend",
        `<h1> ${news.title} </h1> <p> ${news.content}</p>`
      );
    })
    // При возникновении ошибки показываем сообщение об ошибке:
    .catch((err) => {
      alert(err.message);
    })
    // После завершения операции (будь то успешная загрузка или ошибка)
    // включаем кнопку "Загрузить" снова:
    .finally(() => {
      btnEl.disabled = false;
    });
});
