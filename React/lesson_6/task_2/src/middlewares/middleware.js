// Для выполнения этого задания, вам потребуется создать логгирующее
// middleware для Redux, которое будет выводить в консоль информацию о
// действиях (actions) и состоянии (state) до и после выполнения каждого
// действия. Это поможет в отладке и понимании потока данных в вашем
// приложении.
// ● Сначала установите необходимые зависимости для вашего
// проекта, исполþзуя npm install @reduxjs/toolkit react-redux. Затем
// создайте middleware, которое принимает три аргумента: store,
// next, и action. Ваше middleware должно выводить в консоль
// текущее действие и состояние до его выполнения, вызывать
// next(action) для передачи действия следующему middleware или
// редюсеру, а затем выводить в консоль состояние после
// выполнения действия.
// ● После создания middleware, подключите его к вашему Redux
// store. Для этого используйте функцию configureStore из
// @reduxjs/toolkit. В результате, каждое действие, отправленное
// через store.dispatch, будет логгироваться вашим middleware

// Создаем логирующее middleware
const loggerMiddleware = store => next => action => {
	// Выводим информацию о действии (action), которое будет выполнено
	console.log('Действие:', action);
	// Выводим/Логируем текущее состояние хранилища в консоль до выполнения действия
	console.log('Текущее состояние:', store.getState());

	// Передаем действие следующему middleware или редюсеру
	const result = next(action);

	// Выводим состояние хранилища после выполнения действия
	console.log('Новое состояние:', store.getState());
	// Возвращаем результат, чтобы не нарушить цепочку middleware
	return result;
};

export default loggerMiddleware;
